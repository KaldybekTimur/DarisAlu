//
//  IPhoneX3VC.swift
//
//  Created on Jul 20, 2018.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit



class IPhoneX3VC: NSObject {
    
    
    //MARK: - Canvas Drawings
    
    /// Page 1
    
    class func drawIPhoneX3VC(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// UpperBackground
        let upperBackground = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 376, height: 812))
        context.saveGState()
        context.saveGState()
        // Warning: Image fill is not supported.
        context.restoreGState()
        context.saveGState()
        upperBackground.lineWidth = 2
        context.beginPath()
        context.addPath(upperBackground.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0.592, alpha: 1).setStroke()
        upperBackground.stroke()
        context.restoreGState()
        context.restoreGState()
        
        /// Daris Alu
        let darisAlu = NSMutableAttributedString(string: "Daris Alu")
        darisAlu.addAttribute(.font, value: UIFont(name: "Thonburi", size: 30)!, range: NSRange(location: 0, length: darisAlu.length))
        darisAlu.addAttribute(.kern, value: 0.6, range: NSRange(location: 0, length: darisAlu.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            darisAlu.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: darisAlu.length))
        }
        darisAlu.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: darisAlu.length))
        context.saveGState()
        darisAlu.draw(at: CGPoint(x: 16, y: 60))
        context.restoreGState()
        
        /// Животные
        // Warning: New symbols are not supported.
        
        /// Животные
        // Warning: New symbols are not supported.
        
        /// TabBar
        // Warning: New symbols are not supported.
        
        /// Rectangle
        let rectangle = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 126, height: 58))
        context.saveGState()
        context.setAlpha(0)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 125, y: 729)
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        /// iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// Все
        // Warning: New symbols are not supported.
        
        /// Еда
        // Warning: New symbols are not supported.
        
        /// Животные
        // Warning: New symbols are not supported.
        
        /// Растения
        // Warning: New symbols are not supported.
        
        /// Части Тела
        // Warning: New symbols are not supported.
        
        /// CategoryBlock(Concr)
        // Warning: New symbols are not supported.
        
        /// Rectangle 6
        let rectangle6 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 99, height: 58))
        context.saveGState()
        context.setAlpha(0)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 267, y: 729)
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    
    //MARK: - Canvas Images
    
    /// Page 1
    
    class func imageOfIPhoneX3VC() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        IPhoneX3VC.drawIPhoneX3VC()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
