//
//  IPhoneX2VC.swift
//
//  Created on Jul 20, 2018.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit



class IPhoneX2VC: NSObject {
    
    
    //MARK: - Canvas Drawings
    
    /// Page 1
    
    class func drawIPhoneX2VC(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 376, height: 812))
        context.saveGState()
        context.saveGState()
        background.addClip()
        context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                    UIColor(hue: 0.643, saturation: 0.674, brightness: 0.937, alpha: 1).cgColor,
                    UIColor(hue: 0.643, saturation: 0.489, brightness: 0.911, alpha: 1).cgColor,
                    UIColor(hue: 0.643, saturation: 0.389, brightness: 0.897, alpha: 1).cgColor,
                    UIColor(white: 0.847, alpha: 1).cgColor,
                ] as CFArray, locations: [0, 0.78, 1, 1])!,
            start: CGPoint(x: 188, y: 0),
            end: CGPoint(x: 188, y: 812),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()
        context.saveGState()
        background.lineWidth = 2
        context.beginPath()
        context.addPath(background.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0.592, alpha: 1).setStroke()
        background.stroke()
        context.restoreGState()
        context.restoreGState()
        
        /// lowerBackground
        let lowerBackground = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 376, height: 376))
        context.saveGState()
        context.translateBy(x: 0, y: 436)
        UIColor.white.setFill()
        lowerBackground.fill()
        context.saveGState()
        lowerBackground.lineWidth = 2
        context.beginPath()
        context.addPath(lowerBackground.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0.592, alpha: 1).setStroke()
        lowerBackground.stroke()
        context.restoreGState()
        context.restoreGState()
        
        /// LoginView
        let loginView = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 324, height: 376))
        context.saveGState()
        context.translateBy(x: 25, y: 254)
        context.saveGState()
        context.beginPath()
        context.addPath(loginView.cgPath)
        context.addRect(loginView.bounds.insetBy(dx: -16, dy: -20))
        context.clip(using: .evenOdd)
        context.translateBy(x: -341, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 342, y: 5)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 15 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            loginView.fill()
            context.saveGState()
            loginView.lineWidth = 2
            context.beginPath()
            context.addPath(loginView.cgPath)
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            loginView.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        UIColor.white.setFill()
        loginView.fill()
        context.saveGState()
        loginView.lineWidth = 2
        context.beginPath()
        context.addPath(loginView.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0.592, alpha: 1).setStroke()
        loginView.stroke()
        context.restoreGState()
        context.restoreGState()
        
        /// PasswordTxtField
        // Warning: New symbols are not supported.
        
        /// MailTxtField
        // Warning: New symbols are not supported.
        
        /// SurnameTxtField
        // Warning: New symbols are not supported.
        
        /// NameTxtField
        // Warning: New symbols are not supported.
        
        /// Home
        // Warning: Image layers are not supported.
        
        /// iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// Логин
        let layer = NSMutableAttributedString(string: "Логин")
        layer.addAttribute(.font, value: UIFont(name: "Thonburi", size: 25)!, range: NSRange(location: 0, length: layer.length))
        layer.addAttribute(.kern, value: 0.53, range: NSRange(location: 0, length: layer.length))
        layer.addAttribute(.foregroundColor, value: UIColor(white: 0.577, alpha: 1), range: NSRange(location: 0, length: layer.length))
        context.saveGState()
        layer.draw(at: CGPoint(x: 150, y: 264))
        context.restoreGState()
        
        /// Misc/Big Button
        // Warning: New symbols are not supported.
        
        /// Войти
        let layer2 = NSMutableAttributedString(string: "Войти")
        layer2.addAttribute(.font, value: UIFont(name: "LucidaGrande", size: 20)!, range: NSRange(location: 0, length: layer2.length))
        layer2.addAttribute(.kern, value: 0.33, range: NSRange(location: 0, length: layer2.length))
        layer2.addAttribute(.foregroundColor, value: UIColor(white: 0.464, alpha: 1), range: NSRange(location: 0, length: layer2.length))
        context.saveGState()
        layer2.draw(at: CGPoint(x: 150, y: 708))
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    /// Symbols
    
    class func drawIPhoneXBarsTabBar3Items(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 83), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 83), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 83)
        
        /// Bar
        let bar = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 82.5))
        context.saveGState()
        context.translateBy(x: 0, y: 0.5)
        // Warning: Blur effects are not supported.
        UIColor(white: 0.98, alpha: 0.9).setFill()
        bar.fill()
        context.saveGState()
        UIRectClip(bar.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
        context.setAlpha(0.25)
        context.beginTransparencyLayer(in: bar.bounds, auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            bar.fill()
            context.setBlendMode(.destinationOut)
            context.beginTransparencyLayer(in: bar.bounds, auxiliaryInfo: nil)
            do {
                context.translateBy(x: -375, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 375, y: 0.5)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                }
                UIColor.black.setFill()
                bar.fill()
            }
            context.endTransparencyLayer()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.restoreGState()
        
        /// iPhone X/Home Indicator/Home Indicator - On Light
        // Warning: New symbols are not supported.
        
        /// Item 3
        // Warning: New symbols are not supported.
        
        /// Item 2
        // Warning: New symbols are not supported.
        
        /// Item 1
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    class func drawPattern(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 354, height: 39), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 354, height: 39), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 354, y: resizedFrame.height / 39)
        
        /// Rectangle 5
        let rectangle5 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 354, height: 39), cornerRadius: 6)
        context.saveGState()
        context.saveGState()
        rectangle5.addClip()
        context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                    UIColor(hue: 0.087, saturation: 0.997, brightness: 0.847, alpha: 1).cgColor,
                    UIColor.white.cgColor,
                ] as CFArray, locations: [0, 1])!,
            start: CGPoint(x: 177, y: 100.42),
            end: CGPoint(x: 177, y: -86.82),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()
        context.saveGState()
        rectangle5.lineWidth = 2
        context.beginPath()
        context.addPath(rectangle5.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0.592, alpha: 1).setStroke()
        rectangle5.stroke()
        context.restoreGState()
        context.restoreGState()
        
        /// Пользователь
        let layer = NSMutableAttributedString(string: "Пользователь")
        layer.addAttribute(.font, value: UIFont(name: "LucidaGrande", size: 15)!, range: NSRange(location: 0, length: layer.length))
        layer.addAttribute(.kern, value: 0.25, range: NSRange(location: 0, length: layer.length))
        layer.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: layer.length))
        context.saveGState()
        layer.draw(at: CGPoint(x: 125, y: 8))
        context.restoreGState()
        
        /// Место
        let layer2 = NSMutableAttributedString(string: "Место")
        layer2.addAttribute(.font, value: UIFont(name: "LucidaGrande", size: 15)!, range: NSRange(location: 0, length: layer2.length))
        layer2.addAttribute(.kern, value: 0.25, range: NSRange(location: 0, length: layer2.length))
        layer2.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: layer2.length))
        context.saveGState()
        layer2.draw(at: CGPoint(x: 6, y: 8))
        context.restoreGState()
        
        /// Очки
        let layer3 = NSMutableAttributedString(string: "Очки")
        layer3.addAttribute(.font, value: UIFont(name: "LucidaGrande", size: 15)!, range: NSRange(location: 0, length: layer3.length))
        layer3.addAttribute(.kern, value: 0.25, range: NSRange(location: 0, length: layer3.length))
        layer3.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: layer3.length))
        context.saveGState()
        layer3.draw(at: CGPoint(x: 302, y: 8))
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawLeaderboardRect(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 354, height: 77), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 354, height: 77), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 354, y: resizedFrame.height / 77)
        
        /// leaderboardRect
        let leaderboardRect2 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 354, height: 77), cornerRadius: 19)
        context.saveGState()
        context.setAlpha(0.92)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.white.setFill()
            leaderboardRect2.fill()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        /// Имя Фамилия
        let layer = NSMutableAttributedString(string: "Имя Фамилия")
        layer.addAttribute(.font, value: UIFont(name: "LucidaGrande-Bold", size: 20)!, range: NSRange(location: 0, length: layer.length))
        layer.addAttribute(.kern, value: 0.25, range: NSRange(location: 0, length: layer.length))
        layer.addAttribute(.foregroundColor, value: UIColor(white: 0.536, alpha: 1), range: NSRange(location: 0, length: layer.length))
        context.saveGState()
        layer.draw(at: CGPoint(x: 105, y: 27))
        context.restoreGState()
        
        /// 1
        let _1 = NSMutableAttributedString(string: "1")
        _1.addAttribute(.font, value: UIFont(name: "LucidaGrande", size: 25)!, range: NSRange(location: 0, length: _1.length))
        _1.addAttribute(.kern, value: 0.25, range: NSRange(location: 0, length: _1.length))
        _1.addAttribute(.foregroundColor, value: UIColor(hue: 0.59, saturation: 0.674, brightness: 0.886, alpha: 1), range: NSRange(location: 0, length: _1.length))
        context.saveGState()
        _1.draw(at: CGPoint(x: 18, y: 23))
        context.restoreGState()
        
        /// 835
        let _835 = NSMutableAttributedString(string: "835")
        _835.addAttribute(.font, value: UIFont(name: "LucidaGrande", size: 20)!, range: NSRange(location: 0, length: _835.length))
        _835.addAttribute(.kern, value: 0.25, range: NSRange(location: 0, length: _835.length))
        _835.addAttribute(.foregroundColor, value: UIColor(white: 0.303, alpha: 1), range: NSRange(location: 0, length: _835.length))
        context.saveGState()
        _835.draw(at: CGPoint(x: 298, y: 27))
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawAnswer(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 162, height: 62), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 162, height: 62), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 162, y: resizedFrame.height / 62)
        
        /// 1st Answer
        let _1stAnswer = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 162, height: 62))
        context.saveGState()
        UIColor(hue: 0.104, saturation: 0.625, brightness: 0.934, alpha: 1).setFill()
        _1stAnswer.fill()
        context.saveGState()
        _1stAnswer.lineWidth = 2
        context.beginPath()
        context.addPath(_1stAnswer.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0.592, alpha: 1).setStroke()
        _1stAnswer.stroke()
        context.restoreGState()
        context.restoreGState()
        
        /// 1ый Ответ
        let _1 = NSMutableAttributedString(string: "1ый Ответ")
        _1.addAttribute(.font, value: UIFont(name: "LucidaGrande", size: 25)!, range: NSRange(location: 0, length: _1.length))
        _1.addAttribute(.kern, value: 0.4, range: NSRange(location: 0, length: _1.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            _1.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _1.length))
        }
        _1.addAttribute(.foregroundColor, value: UIColor(white: 0.995, alpha: 1), range: NSRange(location: 0, length: _1.length))
        context.saveGState()
        _1.draw(at: CGPoint(x: 15, y: 14))
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawCategoryBlockConcr(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 115, height: 115), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 115, height: 115), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 115, y: resizedFrame.height / 115)
        
        /// categoryBlock
        let categoryBlock = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 140, height: 140), cornerRadius: 20)
        context.saveGState()
        context.setAlpha(0.8)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor(white: 0.952, alpha: 1).setFill()
            categoryBlock.fill()
            context.saveGState()
            categoryBlock.lineWidth = 4
            context.beginPath()
            context.addPath(categoryBlock.cgPath)
            context.clip(using: .evenOdd)
            UIColor.white.setStroke()
            categoryBlock.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        /// Одежда
        let layer = NSMutableAttributedString(string: "Одежда")
        layer.addAttribute(.font, value: UIFont(name: "NewPeninimMT", size: 14)!, range: NSRange(location: 0, length: layer.length))
        layer.addAttribute(.kern, value: 0.28, range: NSRange(location: 0, length: layer.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            layer.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: layer.length))
        }
        layer.addAttribute(.foregroundColor, value: UIColor(white: 0.995, alpha: 1), range: NSRange(location: 0, length: layer.length))
        do {
            let shadow = NSShadow()
            shadow.shadowColor = UIColor(white: 0, alpha: 0.64)
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 0, y: 4)).applying(baseTransform)
            shadow.shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            shadow.shadowBlurRadius = 11 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            layer.addAttribute(.shadow, value: shadow, range: NSRange(location: 0, length: layer.length))
        }
        context.saveGState()
        layer.draw(in: CGRect(x: 28, y: 105, width: 85, height: 19))
        context.restoreGState()
        
        /// Clothes
        // Warning: Image layers are not supported.
        
        
        context.restoreGState()
    }
    
    class func drawMiscBigButton2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 295, height: 50), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 295, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 295, y: resizedFrame.height / 50)
        
        /// Background
        let background = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 295, height: 50), cornerRadius: 25)
        context.saveGState()
        context.saveGState()
        context.beginPath()
        context.addPath(background.cgPath)
        context.addRect(background.bounds.insetBy(dx: -17, dy: -20))
        context.clip(using: .evenOdd)
        context.translateBy(x: -323, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 325, y: 5)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 5 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            background.fill()
            context.saveGState()
            background.lineWidth = 1
            UIColor.black.setStroke()
            background.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.saveGState()
        background.addClip()
        context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                    UIColor(hue: 0.643, saturation: 0.766, brightness: 0.939, alpha: 0.91).cgColor,
                    UIColor(hue: 0.643, saturation: 0.766, brightness: 0.261, alpha: 0.5).cgColor,
                    UIColor(white: 0, alpha: 0.5).cgColor,
                ] as CFArray, locations: [0, 0.73, 1])!,
            start: CGPoint(x: 147.97, y: 25),
            end: CGPoint(x: 147.97, y: 57.37),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()
        background.lineWidth = 1
        UIColor.white.setStroke()
        background.stroke()
        context.restoreGState()
        
        /// Регистрация
        let layer = NSMutableAttributedString(string: "Регистрация")
        layer.addAttribute(.font, value: UIFont(name: "Thonburi", size: 17)!, range: NSRange(location: 0, length: layer.length))
        layer.addAttribute(.kern, value: 0.5, range: NSRange(location: 0, length: layer.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            layer.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: layer.length))
        }
        layer.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: layer.length))
        // Warning: Text fill is not supported, use text color.
        context.saveGState()
        layer.draw(in: CGRect(x: 18, y: 15, width: 260, height: 25))
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawMiscBigButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 295, height: 50), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 295, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 295, y: resizedFrame.height / 50)
        
        /// Background
        let background = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 295, height: 50), cornerRadius: 10)
        context.saveGState()
        context.saveGState()
        background.addClip()
        context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                    UIColor(hue: 0.643, saturation: 0.674, brightness: 0.937, alpha: 0.5).cgColor,
                    UIColor(hue: 0.643, saturation: 0.674, brightness: 0.451, alpha: 0.65).cgColor,
                    UIColor(hue: 0.649, saturation: 0.21, brightness: 0.699, alpha: 0.5).cgColor,
                    UIColor(hue: 1, saturation: 0.013, brightness: 0.962, alpha: 0.5).cgColor,
                ] as CFArray, locations: [0, 0.96, 1, 1])!,
            start: CGPoint(x: 147.5, y: 0),
            end: CGPoint(x: 147.5, y: 50),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()
        context.restoreGState()
        
        /// Войти
        let layer = NSMutableAttributedString(string: "Войти")
        layer.addAttribute(.font, value: UIFont(name: "LucidaGrande", size: 20)!, range: NSRange(location: 0, length: layer.length))
        layer.addAttribute(.kern, value: 0.59, range: NSRange(location: 0, length: layer.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            layer.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: layer.length))
        }
        layer.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: layer.length))
        context.saveGState()
        layer.draw(in: CGRect(x: 18, y: 12, width: 260, height: 26))
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    class func drawIPhoneXFrame(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 376, height: 818), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 376, height: 818), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 376, y: resizedFrame.height / 818)
        
        /// iPhone X/iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// Bars / Home Indicator / On Light
        // Warning: New symbols are not supported.
        
        /// iPhone X/Status Bars/Status Bar (Black)
        // Warning: New symbols are not supported.
        
        
        context.restoreGState()
    }
    
    
    //MARK: - Canvas Images
    
    /// Page 1
    
    class func imageOfIPhoneX2VC() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        IPhoneX2VC.drawIPhoneX2VC()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    /// Symbols
    
    class func imageOfIPhoneXBarsTabBar3Items() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 83), false, 0)
        IPhoneX2VC.drawIPhoneXBarsTabBar3Items()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfPattern() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 354, height: 39), false, 0)
        IPhoneX2VC.drawPattern()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfLeaderboardRect() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 354, height: 77), false, 0)
        IPhoneX2VC.drawLeaderboardRect()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfAnswer() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 162, height: 62), false, 0)
        IPhoneX2VC.drawAnswer()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCategoryBlockConcr() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 115, height: 115), false, 0)
        IPhoneX2VC.drawCategoryBlockConcr()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfMiscBigButton2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 295, height: 50), false, 0)
        IPhoneX2VC.drawMiscBigButton2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfMiscBigButton() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 295, height: 50), false, 0)
        IPhoneX2VC.drawMiscBigButton()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIPhoneXFrame() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 376, height: 818), false, 0)
        IPhoneX2VC.drawIPhoneXFrame()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
