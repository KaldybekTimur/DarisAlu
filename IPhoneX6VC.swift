//
//  IPhoneX6VC.swift
//
//  Created on Jul 20, 2018.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit



class IPhoneX6VC: NSObject {
    
    
    //MARK: - Canvas Drawings
    
    /// Page 1
    
    class func drawIPhoneX6VC(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 376, height: 812))
        context.saveGState()
        context.translateBy(x: 1, y: 0)
        context.saveGState()
        // Warning: Image fill is not supported.
        context.restoreGState()
        context.saveGState()
        background.lineWidth = 2
        context.beginPath()
        context.addPath(background.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0.592, alpha: 1).setStroke()
        background.stroke()
        context.restoreGState()
        context.restoreGState()
        
        /// mainBackground
        let mainBackground = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 376, height: 350), cornerRadius: 2)
        context.saveGState()
        context.translateBy(x: 0, y: 462)
        context.saveGState()
        context.beginPath()
        context.addPath(mainBackground.cgPath)
        context.addRect(mainBackground.bounds.insetBy(dx: -12, dy: -12))
        context.clip(using: .evenOdd)
        context.translateBy(x: -389, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 393, y: 4)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 8 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.202, alpha: 0.5).cgColor)
        }
        UIColor.black.setFill()
        mainBackground.fill()
        context.restoreGState()
        UIColor.white.setFill()
        mainBackground.fill()
        context.restoreGState()
        
        /// iPhone X/Bars/Tab Bar/3 Items
        // Warning: New symbols are not supported.
        
        /// Профиль
        let layer = NSMutableAttributedString(string: "Профиль")
        layer.addAttribute(.font, value: UIFont(name: "LucidaGrande", size: 20)!, range: NSRange(location: 0, length: layer.length))
        layer.addAttribute(.kern, value: 0.25, range: NSRange(location: 0, length: layer.length))
        layer.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: layer.length))
        context.saveGState()
        layer.draw(at: CGPoint(x: 142, y: 63))
        context.restoreGState()
        
        /// iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// Имя Фамилия
        let layer2 = NSMutableAttributedString(string: "Имя Фамилия")
        layer2.addAttribute(.font, value: UIFont(name: "LucidaGrande", size: 20)!, range: NSRange(location: 0, length: layer2.length))
        layer2.addAttribute(.kern, value: 0.25, range: NSRange(location: 0, length: layer2.length))
        layer2.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: layer2.length))
        context.saveGState()
        layer2.draw(at: CGPoint(x: 120, y: 252))
        context.restoreGState()
        
        /// Oval
        let oval = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 90, height: 90))
        context.saveGState()
        context.translateBy(x: 143, y: 113)
        UIColor(white: 0.847, alpha: 1).setFill()
        oval.fill()
        oval.lineWidth = 1
        UIColor(white: 0.592, alpha: 1).setStroke()
        oval.stroke()
        context.restoreGState()
        
        /// почта
        let layer3 = NSMutableAttributedString(string: "почта")
        layer3.addAttribute(.font, value: UIFont(name: "LucidaGrande", size: 20)!, range: NSRange(location: 0, length: layer3.length))
        layer3.addAttribute(.kern, value: 0.25, range: NSRange(location: 0, length: layer3.length))
        layer3.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: layer3.length))
        context.saveGState()
        layer3.draw(at: CGPoint(x: 159, y: 313))
        context.restoreGState()
        
        /// question
        // Warning: Image layers are not supported.
        
        /// Задать вопрос разраб
        let layer4 = NSMutableAttributedString(string: "Задать вопрос разработчику ")
        layer4.addAttribute(.font, value: UIFont(name: "LucidaGrande", size: 15)!, range: NSRange(location: 0, length: layer4.length))
        layer4.addAttribute(.kern, value: 0.25, range: NSRange(location: 0, length: layer4.length))
        layer4.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: layer4.length))
        context.saveGState()
        layer4.draw(at: CGPoint(x: 16, y: 395))
        context.restoreGState()
        
        /// instagram
        // Warning: Image layers are not supported.
        
        /// vk
        // Warning: Image layers are not supported.
        
        /// facebook
        // Warning: Image layers are not supported.
        
        /// Rectangle 7
        let rectangle7 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 92, height: 61))
        context.saveGState()
        context.setAlpha(0)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 16, y: 730)
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        /// Rectangle 8
        let rectangle8 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 113, height: 61))
        context.saveGState()
        context.setAlpha(0)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 129, y: 730)
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    
    //MARK: - Canvas Images
    
    /// Page 1
    
    class func imageOfIPhoneX6VC() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        IPhoneX6VC.drawIPhoneX6VC()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
