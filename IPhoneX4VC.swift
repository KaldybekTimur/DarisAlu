//
//  IPhoneX4VC.swift
//
//  Created on Jul 20, 2018.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit



class IPhoneX4VC: NSObject {
    
    
    //MARK: - Canvas Drawings
    
    /// Page 1
    
    class func drawIPhoneX4VC(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background
        let background = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 376, height: 812))
        context.saveGState()
        context.saveGState()
        // Warning: Image fill is not supported.
        context.restoreGState()
        context.saveGState()
        background.lineWidth = 2
        context.beginPath()
        context.addPath(background.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0.592, alpha: 1).setStroke()
        background.stroke()
        context.restoreGState()
        context.restoreGState()
        
        /// iPhone X Frame
        // Warning: New symbols are not supported.
        
        /// Line
        let line = UIBezierPath()
        line.move(to: CGPoint(x: 0.5, y: 0.25))
        line.addLine(to: CGPoint(x: 279.5, y: 0.25))
        context.saveGState()
        context.translateBy(x: 71, y: 770)
        line.lineCapStyle = .square
        line.lineWidth = 1
        UIColor.white.setStroke()
        line.stroke()
        context.restoreGState()
        
        /// 00:10
        let _0010 = NSMutableAttributedString(string: "00:10")
        _0010.addAttribute(.font, value: UIFont(name: "LucidaGrande", size: 20)!, range: NSRange(location: 0, length: _0010.length))
        _0010.addAttribute(.kern, value: 0.4, range: NSRange(location: 0, length: _0010.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            _0010.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _0010.length))
        }
        _0010.addAttribute(.foregroundColor, value: UIColor(white: 0.995, alpha: 1), range: NSRange(location: 0, length: _0010.length))
        context.saveGState()
        _0010.draw(at: CGPoint(x: 298, y: 67))
        context.restoreGState()
        
        /// Daris Alu
        let darisAlu = NSMutableAttributedString(string: "Daris Alu")
        darisAlu.addAttribute(.font, value: UIFont(name: "LucidaGrande", size: 30)!, range: NSRange(location: 0, length: darisAlu.length))
        darisAlu.addAttribute(.kern, value: 0.6, range: NSRange(location: 0, length: darisAlu.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            darisAlu.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: darisAlu.length))
        }
        darisAlu.addAttribute(.foregroundColor, value: UIColor(white: 0.995, alpha: 1), range: NSRange(location: 0, length: darisAlu.length))
        context.saveGState()
        darisAlu.draw(at: CGPoint(x: 16, y: 60))
        context.restoreGState()
        
        /// Вопрос
        let layer = NSMutableAttributedString(string: "Вопрос")
        layer.addAttribute(.font, value: UIFont(name: "LucidaGrande", size: 25)!, range: NSRange(location: 0, length: layer.length))
        layer.addAttribute(.kern, value: 0.4, range: NSRange(location: 0, length: layer.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            layer.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: layer.length))
        }
        layer.addAttribute(.foregroundColor, value: UIColor(white: 0.995, alpha: 1), range: NSRange(location: 0, length: layer.length))
        context.saveGState()
        layer.draw(at: CGPoint(x: 142, y: 284))
        context.restoreGState()
        
        /// 2nd Answer
        // Warning: New symbols are not supported.
        
        /// 1st Answer
        // Warning: New symbols are not supported.
        
        /// Rectangle 3
        let rectangle3 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 55, height: 15))
        context.saveGState()
        context.translateBy(x: 16, y: 755)
        UIColor(hue: 0.104, saturation: 0.856, brightness: 0.962, alpha: 1).setFill()
        rectangle3.fill()
        context.saveGState()
        rectangle3.lineWidth = 2
        context.beginPath()
        context.addPath(rectangle3.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0.592, alpha: 1).setStroke()
        rectangle3.stroke()
        context.restoreGState()
        context.restoreGState()
        
        /// 1/10
        let _110 = NSMutableAttributedString(string: "1/10")
        _110.addAttribute(.font, value: UIFont(name: "LucidaGrande", size: 15)!, range: NSRange(location: 0, length: _110.length))
        _110.addAttribute(.kern, value: 0.24, range: NSRange(location: 0, length: _110.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            _110.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _110.length))
        }
        _110.addAttribute(.foregroundColor, value: UIColor(white: 0.995, alpha: 1), range: NSRange(location: 0, length: _110.length))
        context.saveGState()
        _110.draw(at: CGPoint(x: 20, y: 722))
        context.restoreGState()
        
        /// Views / Alerts / Default 2 Line Title
        // Warning: New symbols are not supported.
        
        /// Rectangle 9
        let rectangle9 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 23, height: 78))
        context.saveGState()
        context.translateBy(x: 16, y: 144)
        UIColor.red.setFill()
        rectangle9.fill()
        context.saveGState()
        rectangle9.lineWidth = 2
        context.beginPath()
        context.addPath(rectangle9.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0.592, alpha: 1).setStroke()
        rectangle9.stroke()
        context.restoreGState()
        context.restoreGState()
        
        
        context.restoreGState()
    }
    
    
    //MARK: - Canvas Images
    
    /// Page 1
    
    class func imageOfIPhoneX4VC() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        IPhoneX4VC.drawIPhoneX4VC()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
